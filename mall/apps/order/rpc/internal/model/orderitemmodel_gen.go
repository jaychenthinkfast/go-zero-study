// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderitemFieldNames          = builder.RawFieldNames(&Orderitem{})
	orderitemRows                = strings.Join(orderitemFieldNames, ",")
	orderitemRowsExpectAutoSet   = strings.Join(stringx.Remove(orderitemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderitemRowsWithPlaceHolder = strings.Join(stringx.Remove(orderitemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrdersOrderitemIdPrefix = "cache:orders:orderitem:id:"
)

type (
	orderitemModel interface {
		Insert(ctx context.Context, data *Orderitem) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Orderitem, error)
		Update(ctx context.Context, data *Orderitem) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultOrderitemModel struct {
		sqlc.CachedConn
		table string
	}

	Orderitem struct {
		Id               uint64    `db:"id"`               // 订单子表id
		Orderid          string    `db:"orderid"`          // 订单id
		Userid           uint64    `db:"userid"`           // 用户id
		Proid            uint64    `db:"proid"`            // 商品id
		Proname          string    `db:"proname"`          // 商品名称
		Proimage         string    `db:"proimage"`         // 商品图片地址
		Currentunitprice float64   `db:"currentunitprice"` // 生成订单时的商品单价，单位是元,保留两位小数
		Quantity         int64     `db:"quantity"`         // 商品数量
		Totalprice       float64   `db:"totalprice"`       // 商品总价,单位是元,保留两位小数
		CreateTime       time.Time `db:"create_time"`      // 创建时间
		UpdateTime       time.Time `db:"update_time"`      // 更新时间
	}
)

func newOrderitemModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderitemModel {
	return &defaultOrderitemModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`orderitem`",
	}
}

func (m *defaultOrderitemModel) Delete(ctx context.Context, id uint64) error {
	ordersOrderitemIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderitemIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ordersOrderitemIdKey)
	return err
}

func (m *defaultOrderitemModel) FindOne(ctx context.Context, id uint64) (*Orderitem, error) {
	ordersOrderitemIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderitemIdPrefix, id)
	var resp Orderitem
	err := m.QueryRowCtx(ctx, &resp, ordersOrderitemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderitemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderitemModel) Insert(ctx context.Context, data *Orderitem) (sql.Result, error) {
	ordersOrderitemIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderitemIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderitemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Orderid, data.Userid, data.Proid, data.Proname, data.Proimage, data.Currentunitprice, data.Quantity, data.Totalprice)
	}, ordersOrderitemIdKey)
	return ret, err
}

func (m *defaultOrderitemModel) Update(ctx context.Context, data *Orderitem) error {
	ordersOrderitemIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderitemIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderitemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Orderid, data.Userid, data.Proid, data.Proname, data.Proimage, data.Currentunitprice, data.Quantity, data.Totalprice, data.Id)
	}, ordersOrderitemIdKey)
	return err
}

func (m *defaultOrderitemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrdersOrderitemIdPrefix, primary)
}

func (m *defaultOrderitemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderitemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderitemModel) tableName() string {
	return m.table
}
